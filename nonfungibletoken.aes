contract ERC721 =
  // state is handled for the storing the elements on blockchain

  record state = { 
    name: string,
    symbol: string,
    owner: address,
    _totalSupply : int,
    _nextTokenId: int,
    assetProperties: map(int, properties),
    map_owned_tokens_count: map(address, int),
    map_token_owner: map(int, address),
    map_token_approvals: map(int, address),
    map_operator_approvals: map(address, map(address, bool)),
    map_token_uris: map(int, string)}
   
   
  record properties ={
    productName : string,
    deliverydate : int,
    datecreated : int,
    isCounterfeit : bool,
    stage_1 : bool,
    stage_2 :  bool,
    stage_3 : bool}
  
  // deployment for the contract using name or symbol

  stateful entrypoint init(name: string, symbol: string, owner: address) = {
  	name = name,
  	symbol = symbol,
    owner = owner,
    _totalSupply=0,
    _nextTokenId=1,
    assetProperties = {},
  	map_owned_tokens_count = {},
  	map_token_owner = {},
  	map_token_approvals = {},
    map_operator_approvals = {},
    map_token_uris = {}}

  // return the name of nonFungible Token

  entrypoint name() : string =
    state.name

 // return the symbol of the nonFungible Token

  entrypoint symbol() : string =
    state.symbol
    
    
  entrypoint totalSupply() : int=
    state._totalSupply
    
  entrypoint nextTokenID() : int=
    state._nextTokenId
    
  // return total supply of the address
  entrypoint balance_of(token_owner: address) : int =
    Map.lookup_default(token_owner,state.map_owned_tokens_count, 0)
    
  // return the owner of the nonFungible Token
  entrypoint owner_of(token_id: int) : address =
    state.map_token_owner[token_id]
    
    
     
        
  stateful entrypoint mint(to : address, tokenUri : string,  productName : string, deliverydate: int) =
    _mint(state._nextTokenId, to)
    set_token_uri(state._nextTokenId, tokenUri)
    let newassetProp: properties ={
      productName= productName,
      deliverydate=deliverydate,
      datecreated= Chain.timestamp,
      isCounterfeit =false,
      stage_1 = true,
      stage_2 = false,
      stage_3= false}
    put(state{assetProperties[state._nextTokenId]= newassetProp})
    put(state{_totalSupply = (state._totalSupply +1)})
    put(state{_nextTokenId = (state._nextTokenId +1)})
    
    
  stateful entrypoint updateProductName(tokenId :  int, productName : string)=
    only_token_owner(Call.caller, tokenId)
    require(state.assetProperties[tokenId].isCounterfeit == false, "asset is counterfeit")
    put(state{assetProperties[tokenId].productName = productName})
    
    
  entrypoint getProductName(tokenId : int) : string =
    state.assetProperties[tokenId].productName

  // create product with tokenid and for the address "to"
  private stateful function _mint(token_id: int, to: address) = 
    only_owner(Call.caller)
    require(!check_token_exists(token_id), "Token can't be overrided")

    put(state{ 
      map_token_owner[token_id] = to,
      map_owned_tokens_count[to] = Map.lookup_default(to, state.map_owned_tokens_count, 0) + 1})

  // get approval for nonFungible Token 
  entrypoint get_approved(token_id: int) : address =
    state.map_token_approvals[token_id]
  
  entrypoint is_approved_for_all(owner: address, operator: address) : bool =
    Map.lookup_default(operator, Map.lookup_default(owner, state.map_operator_approvals, {}) , false)
  
  // return token url for the nonFungible Token
  entrypoint get_token_uri(token_id: int) : string =
    Map.lookup_default(token_id, state.map_token_uris, "")

  // public function for adding the token url for nonFungible Token
  private stateful function set_token_uri(token_id: int, uri: string) =
    put(state{map_token_uris[token_id] = uri})

  stateful entrypoint approve(token_id: int, to: address) =
    let owner: address = owner_of(token_id)
    
    require(to != Call.caller, "Receiver can't be same as sender")
    require(Call.caller == owner || is_approved_for_all(owner, Call.caller), "Not owner or not approved")
    
    put(state{map_token_approvals[token_id] = to})

  // tranfer the token from address to another address and owner of token approval is required
  stateful entrypoint transfer_from(from: address, to: address, token_id: int) =
    require(is_approved_or_owner(Call.caller, token_id), "Caller isn't approved or owner")
    
    clear_approval(from, token_id)
    remove_token_from(from, token_id)
    add_token_to(to, token_id)

  stateful entrypoint set_approval_for_all(to: address, approved: bool) =
    put(state{map_operator_approvals[Call.caller = {}][to] = approved})
  
  private function check_token_exists(token_id: int) : bool =
    switch(Map.lookup(token_id, state.map_token_owner))
      None => false
      Some(x) => true

  private stateful function add_token_to(to: address, token_id: int) = 
    put(state{map_token_owner = state.map_token_owner{[token_id] = to}})
    put(state{map_owned_tokens_count[to] = Map.lookup_default(to, state.map_owned_tokens_count, 0) + 1})

  // private function for remove token from address
  private stateful function remove_token_from(from: address, token_id: int) =
    //put(state{map_token_owner = state.map_token_owner{[token_id] = #0}})
    put(state{map_token_owner @ tp = Map.delete(token_id, tp)})
    put(state{map_owned_tokens_count[from] = Map.lookup_default(from, state.map_owned_tokens_count, 0) - 1})

  private stateful function clear_approval(from: address, token_id: int) = 
    put(state{map_token_approvals @ mp=Map.delete(token_id, mp)})
  private stateful function remove_token_metadata(token_id: int) = 
    put(state{map_token_uris = state.map_token_uris{[token_id] = ""}})

// private function for check address is owner or not
  private function only_owner(owner : address) =
    require(owner == state.owner, "Only owner can mint!")

  private function only_token_owner(owner: address, token_id: int)  =
    require(owner == state.map_token_owner[token_id], "Only token owner can transfer!")

  private function is_approved_or_owner(spender: address, token_id: int) : bool = 
    let owner : address = owner_of(token_id)
    get_approved(token_id) == spender || owner == spender || is_approved_for_all(owner, spender)
    

  
  
  
  
  
    
  
    
    

